# Файл docker-compose.yml
version: '3'
volumes:
  pg_data:
  # Новый volume — для статических файлов
  static:

services:
  db:
    image: postgres:13.10
    env_file: .env
    volumes:
      - pg_data:/var/lib/postgresql/data
  backend:
    image: viktoriyakhishchenko/taski_backend
    env_file: .env
    depends_on:
      - db
    # Тут подключаем volume к backend
    volumes:
      - static:/backend_static
  frontend:
    env_file: .env
    image: viktoriyakhishchenko/taski_frontend
    command: cp -r /app/build/. /frontend_static/
    volumes:
      - static:/frontend_static
    depends_on:
      - db
  gateway:
    image: viktoriyakhishchenko/taski_gateway
    depends_on:
      - backend
    # А тут подключаем volume со статикой к gateway
    volumes:
      - static:/staticfiles
    ports:
      - 8000:80 

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов Taski
      - build_and_push_to_docker_hub
      - build_frontend_and_push_to_docker_hub
      - build_gateway_and_push_to_docker_hub
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
      # Копируем docker-compose.production.yml на продакшен-сервер
      - name: Copy docker-compose.yml via ssh
        uses: appleboy/scp-action@master
      # Передаём параметры для action appleboy/scp-action:
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          source: "docker-compose.production.yml"
          target: "taski"
      - name: Executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          # Параметр script передаёт в action appleboy/ssh-action команды,
          # которые нужно выполнить на сервере, 
          # с которым установлено соединение
          script: |
            cd taski
            # Выполняет pull образов с Docker Hub
            sudo docker compose -f docker-compose.production.yml pull
            # Перезапускает все контейнеры в Docker Compose
            sudo docker compose -f docker-compose.production.yml down
            sudo docker compose -f docker-compose.production.yml up -d
            # Выполняет миграции и сбор статики
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py migrate
            sudo docker compose -f docker-compose.production.yml exec backend python manage.py collectstatic
            sudo docker compose -f docker-compose.production.yml exec backend cp -r /app/collected_static/. /backend_static/static/

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
    - name: Send message
      uses: appleboy/telegram-action@master
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        message: Деплой успешно выполнен!